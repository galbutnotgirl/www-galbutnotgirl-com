/*!
 * contentstack-express
 * copyright (c) Built.io Contentstack
 * MIT Licensed
 */

'use strict';
/*!
 * Module dependencies
 */
var _ = require('lodash'),
	minify = require('htmlclean'),
	fs = require('fs'),
	path = require('path');

/**
 * Set language in context and remove prefix from url
 */
module.exports = function (utils) {
	var config = utils.config,
		context = utils.context,
        allowedSetKeys = ['entry', 'template'],
        reservedKeys = ['originalUrl', 'parsedUrl', 'lang', 'content_type', 'query', 'url'].concat(allowedSetKeys);

	var languages = config.get('languages'),
		_length = languages.length;

	var _minify = config.get('view.minify');

	function get(url) {
		var lang;
		for (var i = 0; i < _length; i++) {
			var val = languages[i]._regex.exec(url);
			if (val && val.length <= 2) {
				lang = {
					relative_url_prefix: languages[i].relative_url_prefix,
					code: languages[i].code,
					url: '/' + val[1]
				};
				break;
			}
		}
		return lang;
	}

	return function boot(req, res, next) {
        // setting the routing variable
        req._contentstack = req._contentstack || {};

        // routing API for getting informations
        req.contentstack = {
            get: function(key) {
                return ((key && typeof key === 'string') ? req._contentstack[key] : null);
            },
            set: function(key, value) {
                if(key && typeof key === 'string' && value) {
                    if(~allowedSetKeys.indexOf(key)) {
                        req._contentstack[key] = value;
                    } else if(~reservedKeys.indexOf(key)) {
                        console.error(key+' is restricted key. Please try another.');
                    }
                }
            }
        };

		// add getViewContext function to set and get data
		req.getViewContext = function () {
			req.entry = req.entry || {}; // to store the context data
			return {
				set: function (key, value) {
					if (typeof key !== 'string') throw new TypeError('req.getViewContext().set() requires key as string but got a ' + typeof key);
					if (req.entry[key]) {
						req.entry[key] = value;
					} else {
                        req.entry[key] = value;
                    }
				},
				get: function (key) {
					return req.entry[key];
				}
			};
		};

		var reqUrl = req.url,
			parsedUrl = req._parsedUrl.pathname,
			type,
			lang = get(req.url);

        if (lang) {
			if (endsWith(parsedUrl, ".json")) {
				req._contentstack.response_type = type = 'json';
				reqUrl = spliceLastIndex(reqUrl, ".json");
				parsedUrl = spliceLastIndex(parsedUrl, ".json");
			}

			req._contentstack.query = req.query;
            req._contentstack.url = req.url = req.url.replace(lang.relative_url_prefix, '/');
			req._contentstack.originalUrl = reqUrl;
			req.parsedUrl = req._contentstack.parsedUrl = parsedUrl.replace(lang.relative_url_prefix, '/');
			req._contentstack.lang = lang;
			context.set('lang', lang.code);

			if (_minify && type !== 'json') res.render = render(res.render);

			next();
		} else {
			next('no_lang');
		}
	};
};

/*
 check is string ends with substring
 */
function endsWith(str, suffix) {
	return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

/*
 remove given sub-string from string
 */
function spliceLastIndex(str, substring) {
	return str.slice(0, str.lastIndexOf(substring));
}

/*
 override render function to minify html
 */
function render(_render) {
	return function (view, data, fn) {
		var self = this;
		fn = function (err, html) {
			try {
				if (err) throw err;
				html = minify(html);
				self.send(html);
			} catch (e) {
				self.req.next(e);
			}
		};
		_render.call(self, view, data, fn);
	};
}


