/**
 * Module dependencies.
 */
var path = require('path'),
    fs = require('fs'),
    _ = require('lodash'),
    pathToRegexp = require('path-to-regexp'),
    mkdirp = require('mkdirp'),
    request = require('request'),
    async = require('async'),
    utils = require('./../utils/index');

var config = utils.config,
    languages = config.get('languages'),
    headers = {
        api_key: config.get('contentstack.api_key'),
        access_token: config.get('contentstack.access_token')
    };

var helper = module.exports = {};

// create all directories as per path
helper.mkdirAllSync = function (path, permission) {
    mkdirp.sync(path, permission);
};

// remove extra and unwanted keys from entry object
helper.deleteKeys = function (entry) {
    var keys = ["ACL", "_metadata.publish_details", "app_user_object_uid", "published"],
        entry = entry.object || entry,
        d = new Date();

    for (var i = 0, _i = keys.length; i < _i; i++) {
        var _keys = keys[i].split('.'),
            len = _keys.length;

        var _entry = entry;
        for (var j = 0; j < len; j++) {
            if (j == (len - 1))
                delete _entry[_keys[j]];
            else
                _entry = _entry[_keys[j]];
        }
    }
    entry.uid = (entry._metadata && entry._metadata.uid) ? entry._metadata.uid : entry.uid;
    entry.published_at = d.toISOString();
    return entry;
};

// update references in entry object
helper.updateReferences = function (data) {
    if (data && data.schema && data.entry) {
        var parent = [];
        var update = function (parent, form_id, entry) {
            var _entry = entry,
                len = parent.length;
            for (var j = 0; j < len; j++) {
                if (_entry && parent[j]) {
                    if (j == (len - 1) && _entry[parent[j]]) {
                        _entry[parent[j]] = {values: _entry[parent[j]], _content_type_id: form_id};
                    } else {
                        _entry = _entry[parent[j]];
                        var _keys = _.clone(parent).splice(eval(j + 1), len);
                        if (_entry instanceof Array) {
                            for (var i = 0, _i = _entry.length; i < _i; i++) {
                                update(_keys, form_id, _entry[i]);
                            }
                        } else if (!_entry instanceof Object) {
                            break;
                        }
                    }
                }
            }
        };
        var find = function (schema, entry) {
            for (var i = 0, _i = schema.length; i < _i; i++) {
                if (schema[i].data_type == "reference") {
                    parent.push(schema[i].uid);
                    update(parent, schema[i].reference_to, entry);
                    parent.pop();
                }
                if (schema[i].data_type == "group") {
                    parent.push(schema[i].uid);
                    find(schema[i].schema, entry);
                    parent.pop();
                }
            }
        };
        find(data.schema, data.entry);
    }
    return data;
};

// replace assets url
helper.replaceAssetsUrl = function (_assets, content_type, entry) {
    if (content_type && content_type.schema && entry) {
        var parent = [];
        var replace = function (parent, schema, entry) {
            var _entry = entry,
                len = parent.length;
            for (var j = 0; j < len; j++) {
                if (j == (len - 1) && _entry[parent[j]]) {
                    if (_entry[parent[j]] instanceof Array) {
                        for (var i = 0, _i = _entry[parent[j]].length; i < _i; i++) {
                            replace([i], schema, _entry[parent[j]]);
                        }
                    } else {
                        switch (schema.data_type) {
                            case "file":
                                _entry[parent[j]] = _assets[_entry[parent[j]].uid];
                                break;
                            case "text":
                                var _matches, regex, __entry;
                                if(schema && schema.field_metadata && schema.field_metadata.markdown) {
                                    regex = new RegExp('https://(dev-|stag-|)(contentstack-|)api.(built|contentstack).io/(.*?)/download(.*?)uid=([a-z0-9]+[^&\?\s\n])((.*)[\n\s]?)', 'g');
                                } else {
                                    regex = new RegExp('[\'"]https://(dev-|stag-|)(contentstack-|)api.(built|contentstack).io/(.*?)/download(.*?)uid=([a-z0-9]+[^\?&\'"])(.*?)[\'"]', 'g');
                                }
                                __entry = _entry[parent[j]].slice(0);
                                while ((_matches = regex.exec(_entry[parent[j]])) !== null) {
                                    if (_matches && _matches.length && _matches[6] && _assets[_matches[6]]) {
                                        __entry = (schema && schema.field_metadata && schema.field_metadata.markdown) ? __entry.replace(_matches[0], encodeURI(_assets[_matches[6]]._internal_url) + "\n") : __entry.replace(_matches[0], "'" + _assets[_matches[6]]._internal_url + "'");
                                    }
                                }
                                _entry[parent[j]] = __entry;
                                break;
                        }
                    }

                } else {
                    _entry = _entry[parent[j]];
                    var _keys = _.clone(parent).splice(eval(j + 1), len);
                    if (_entry instanceof Array) {
                        for (var i = 0, _i = _entry.length; i < _i; i++) {
                            replace(_keys, schema, _entry[i]);
                        }
                    } else if (typeof _entry != "object") {
                        break;
                    }
                }
            }
        };
        var find = function (schema, entry) {
            for (var i = 0, _i = schema.length; i < _i; i++) {
                if (schema[i].data_type == "file" || (schema[i].data_type == "text")) {
                    parent.push(schema[i].uid);
                    replace(parent, schema[i], entry);
                    parent.pop();
                }
                if (schema[i].data_type == "group") {
                    parent.push(schema[i].uid);
                    find(schema[i].schema, entry);
                    parent.pop();
                }
            }
        };
        find(content_type.schema, entry);
        return entry;
    }
};

// get assets IDs
helper.getAssetsIds = function (data) {
    if (data && data.content_type && data.content_type.schema && data.entry) {
        var parent = [],
            assetsIds = [];
        var _get = function (schema, _entry) {
            switch (schema.data_type) {
                case "file":
                    if (_entry && _entry.uid) {
                        assetsIds.push(_entry.uid);
                    }
                    break;
                case "text":
                    var _matches,regex;
                    if(schema && schema.field_metadata && schema.field_metadata.markdown) {
                        regex = new RegExp('https://(dev-|stag-|)(contentstack-|)api.(built|contentstack).io/(.*?)/download(.*?)uid=([a-z0-9]+[^\?&\s\n])((.*)[\n\s]?)', 'g');
                    } else {
                        regex = new RegExp('[\'"]https://(dev-|stag-|)(contentstack-|)api.(built|contentstack).io/(.*?)/download(.*?)uid=([a-z0-9]+[^\?&\'"])(.*?)[\'"]', 'g');
                    }
                    while ((_matches = regex.exec(_entry)) !== null) {
                        if (_matches && _matches.length && _matches[6]) {
                            assetsIds.push(_matches[6]);
                        }
                    }
                    break;
            }
        };
        var get = function (parent, schema, entry) {
            var _entry = entry,
                len = parent.length;
            for (var j = 0; j < len; j++) {
                _entry = _entry[parent[j]];
                if (j == (len - 1) && _entry) {
                    if (_entry instanceof Array) {
                        for (var i = 0, _i = _entry.length; i < _i; i++) {
                            _get(schema, _entry[i]);
                        }
                    } else {
                        _get(schema, _entry);
                    }

                } else {
                    var _keys = _.clone(parent).splice(eval(j + 1), len);
                    if (_entry instanceof Array) {
                        for (var i = 0, _i = _entry.length; i < _i; i++) {
                            get(_keys, schema, _entry[i]);
                        }
                    } else if (typeof _entry != "object") {
                        break;
                    }
                }
            }
        };
        var find = function (schema, entry) {
            for (var i = 0, _i = schema.length; i < _i; i++) {
                if (schema[i].data_type == "file" || (schema[i].data_type == "text")) {
                    parent.push(schema[i].uid);
                    get(parent, schema[i], entry);
                    parent.pop();
                }
                if (schema[i].data_type == "group") {
                    parent.push(schema[i].uid);
                    find(schema[i].schema, entry);
                    parent.pop();
                }
            }
        };
        find(data.content_type.schema, data.entry);
        return _.uniq(assetsIds);
    }
};

// download or remove assets
helper.getAssets = function () {
    var assetsConf = config.get('assets'),
        _assets = {};

    for(var i = 0, _i = languages.length; i < _i; i++) {
        var __path = languages[i].assetsPath;
        if (!fs.existsSync(path.join(__path, '_assets.json'))) fs.writeFileSync(path.join(__path, '_assets.json'), "{}");
        _assets[languages[i].code] = path.join(__path, '_assets.json');
    }
    return function (asset, lang, remove, cb) {
        try {
            var assets = JSON.parse(fs.readFileSync(_assets[lang.code], 'utf8')),
                _path = lang.assetsPath,
                relativeUrlPrefix = assetsConf.relative_url_prefix;

            // Generate the full assets url foro the given url
            function getAssetUrl(assetUrl) {
                assetUrl = relativeUrlPrefix + assetUrl;
                if(!(lang.relative_url_prefix == "/" || lang.host)) {
                    assetUrl = lang.relative_url_prefix.slice(0, -1) + assetUrl;
                }
                return assetUrl;
            }

            // Used to generate asset path from keys using asset
            function urlFromObject(_asset) {
                var values = [],
                    _keys = assetsConf.keys;

                for (var a = 0, _a = _keys.length; a < _a; a++) {
                    if (_keys[a] == "uid") {
                        values.push((_asset._metadata && _asset._metadata.object_id) ? _asset._metadata.object_id : _asset.uid);
                    } else if (_asset[_keys[a]]) {
                        values.push(_asset[_keys[a]]);
                    } else {
                        throw new TypeError("'" + _keys[a] + "' key is undefined in asset object.");
                    }
                }
                return values;
            }

            if (!remove) {
                var isForceLoad = asset.force_load || false;

                delete asset.ACL;
                delete asset.app_user_object_uid;
                delete asset.force_load;
                if(asset._metadata) delete asset._metadata.publish_details;

                var paths = urlFromObject(asset),
                    _url = getAssetUrl(paths.join('/'));

                paths.unshift(_path);

                // current assets path
                var _assetPath = path.join.apply(path, paths);

                if (_.isEqual(assets[asset.uid], asset) && !isForceLoad && fs.existsSync(_assetPath)) {
                    asset._internal_url = _url;
                    async.setImmediate(function () {
                        cb(null, asset);
                    });
                } else {
                    asset._internal_url = _url;
                    // delete the asset if it is modified
                    if(assets && assets[asset.uid]) {
                        var oldAssetPath = urlFromObject(assets[asset.uid]);
                        oldAssetPath.unshift(_path);
                        helper.deleteAssets(path.join.apply(path, oldAssetPath));
                    }

                    helper.downloadAssets(_assetPath, asset, function (err, data) {
                        if (err) {
                            async.setImmediate(function () {
                                cb(err, null);
                            });
                        } else {
                            delete data._internal_url;
                            assets[data.uid] = _.clone(data, true);
                            fs.writeFileSync(_assets[lang.code], JSON.stringify(assets));
                            data._internal_url = _url;
                            async.setImmediate(function () {
                                cb(null, data);
                            });
                        }
                    });
                }
            } else {
                var _asset = assets[asset];
                if (_asset) {
                    var paths = urlFromObject(_asset);
                    paths.unshift(_path);
                    var _assetPath = path.join.apply(path, paths);
                    helper.deleteAssets(_assetPath);
                    delete assets[asset];
                    fs.writeFileSync(_assets[lang.code], JSON.stringify(assets));
                }
                async.setImmediate(function () {
                    cb(null, null);
                });

            }
        } catch (e) {
            async.setImmediate(function () {
                cb(e, null);
            });
        }
    };
}();

// download assets
helper.downloadAssets = function (assetsPath, asset, callback) {
    headers.authtoken = headers.access_token;
    var out = request({url: asset.url, headers: headers});
    out.on('response', function (resp) {
        if (resp.statusCode === 200) {
            var _path = assetsPath.replace(asset.filename, '');
            helper.mkdirAllSync(_path, 0755);
            var localStream = fs.createWriteStream(path.join(_path, asset.filename));
            out.pipe(localStream);
            localStream.on('close', function () {
                callback(null, asset);
            });
        } else {
            callback("No file found at given url: " + asset.url, null);
        }
    });
    out.on('error', function (e) {
        callback("Error in media request: " + e.message, null);
    });
    out.end();
};

// delete assets
helper.deleteAssets = function (fileLink) {
    if (fs.existsSync(fileLink)) {
        fs.unlinkSync(fileLink);
    }
};

// load plugins
helper.loadPlugins = function (dir) {
    var files = fs.readdirSync(dir);
    for (var i = 0, total = files.length; i < total; i++) {
        var pluginFolder = path.join(dir, files[i]);
        if (fs.lstatSync(pluginFolder).isDirectory()) {
            var plugin = path.join(pluginFolder, "index.js");
            if (fs.existsSync(plugin)) {
                require(plugin);
            }
        }
    }
};

// check value in string or array
helper.pluginChecker = function (str, value) {
    var flag = true;
    if (value && !((typeof value == "object" && value.indexOf(str) != -1) || value == str || value == "*")) {
        flag = false;
    }
    return flag;
};

// updateUrl in entries for the singleton:false
helper.updateUrl = function(entries, contentType, isEntries) {
    try {
        if(entries && contentType && !contentType.singleton && contentType.options && contentType.options.is_page === true && typeof contentType.options.url_pattern === 'string') {
            var allowedKeys = ['created_at', 'uid', 'title'],
                _entries = _.clone(entries, true),
                datePatterns = ['YYYY', 'MM', 'DD'],
                slugRegExp = new RegExp("[^a-z0-9]+", "g");

            var _fields = (function (urlPattern) {
                var urlPatternArray = urlPattern.split("/:"),
                    fields = [];

                // searching the pattern variables
                for (var j = 0, _j = urlPatternArray.length; j < _j; j++) {
                    if (urlPatternArray[j]) {
                        var invalid = false,
                            _field = urlPatternArray[j].split('['),
                            _temp = {
                                "name": _field[0]
                            };
                        if (_field.length > 1 && _field[1].indexOf(']') === (_field[1].length - 1)) {
                            var subPattern = _field[1].substring(0, _field[1].indexOf(']'));
                            subPattern = subPattern.split("-");
                            if (_.intersection(datePatterns, subPattern).length) {
                                _temp.sub_pattern = _.intersection(datePatterns, subPattern);
                            } else {
                                invalid = true;
                                console.error("Invalid date pattern specified select one from these [" + datePatterns.concat(datePatterns.join('-')).join(", ") + "]");
                            }
                        } else if (~urlPatternArray[j].indexOf(']')) {
                            invalid = true;
                            console.error("Date format should be specified correctly.");
                        }
                        if (!invalid) fields.push(_temp);
                    }
                }
                return fields;
            }(contentType.options.url_pattern));

            var generateUrl = function (entry) {
                var _url = [];
                if (_fields.length) {
                    for (var i = 0, total = _fields.length; i < total; i++) {
                        var _field = _fields[i];
                        if (_field && entry[_field.name]) {
                            var value = entry[_field.name];
                            if (_field.sub_pattern && _field.sub_pattern.length) {
                                var subPattern = [];
                                value = new Date(value);
                                for (var j = 0, _j = _field.sub_pattern.length; j < _j; j++) {
                                    var __value;
                                    switch (_field.sub_pattern[j]) {
                                        case 'YYYY':
                                            __value = value.getFullYear();
                                            break;
                                        case 'MM':
                                            var month = value.getMonth() + 1;
                                            __value = (month < 10) ? "0" + month : month;
                                            break;
                                        case 'DD':
                                            var date = value.getDate();
                                            __value = (date < 10) ? "0" + date : date;
                                            break;
                                    }
                                    ;
                                    if (__value) subPattern.push(__value);
                                }
                                _url.push(subPattern.join("-"));
                            } else {
                                value = value.toLowerCase();
                                value = value.replace(slugRegExp, "-");
                                _url.push(value);
                            }
                        } else if (_field && !entry[_field.name]) {
                            _url.push(_field.name);
                        } else {
                            console.error(_field + " such field doesn't exists in an entry");
                            break;
                        }
                    }
                } else {
                    _url.push(entry["uid"]);
                }
                return _url;
            };

            if (_entries instanceof Array) {
                for (var i = 0, _i = _entries.length; i < _i; i++) {
                    if(_entries[i] && _entries[i]['entry'] && !_entries[i]['entry']['url_override'] && _entries[i]['content_type'] && _entries[i]['content_type']['uid'] === contentType.uid) {
                        _entries[i]['entry'] = _entries[i]['entry'] || {};
                        _entries[i]['entry']['url'] = generateUrl(_entries[i]['entry']).join("/");
                    } else if(_entries[i] && isEntries && _entries[i]['_metadata'] && !_entries[i]['_metadata']['url_override']) {
                        _entries[i]['url'] = generateUrl(_entries[i]).join("/");
                    }
                }
            } else if (_entries && typeof _entries === 'object') {
                var _generatedUrl = (isEntries) ? generateUrl(_entries).join("/") : generateUrl(_entries['entry']).join("/");
                if (isEntries && _generatedUrl !== _entries.url) {
                    _entries['_metadata'] = _entries['_metadata'] || {};
                    _entries['_metadata']['url_override'] = true;
                } else if(!isEntries && _entries.entry && _generatedUrl !== _entries.entry.url){
                    _entries['entry'] = _entries['entry'] || {};
                    _entries['entry']['url_override'] = true;
                }

            }
            return _entries;
        }
        return entries;
    } catch(err) {
        console.error("Generate URL error: ", helper.message(err));
    }
};

// execute plugins
helper.executePlugins = function () {
    var plugins = utils.plugin._syncUtility,
        _environment = config.get('environment'),
        _server = config.get('server');

    return function(entry, contentType, lang, action, callback) {
        try {
            // load plugins
            var _loadPlugins = [];
            for (var i in plugins) {
                //if (helper.pluginChecker(contentType && contentType.uid, plugins[i].content_types) && helper.pluginChecker(lang.code, plugins[i].languages) && helper.pluginChecker(_environment, plugins[i].environments) && helper.pluginChecker(_server, plugins[i].servers) && plugins[i][action]) {
                if (plugins[i][action]) {
                    _loadPlugins.push(function(i){
                        return function(cb) {
                            plugins[i][action]({"entry": entry, "content_type": contentType, "language": lang}, cb);
                        };
                    }(i));
                }
            }
            async.series(_loadPlugins, function (err, res) {
                if (err) {
                    callback(err, null);
                } else {
                    callback(null, {"entry": entry, "content_type": contentType});
                }
            });
        } catch (e) {
            callback(e, null);
        }
    };
}();

// get message
helper.message = function (err) {
    if (typeof err == "object") {
        if (err.message) {
            return JSON.stringify(err.message);
        } else if (err.error_message) {
            return JSON.stringify(err.error_message);
        }
        return JSON.stringify(err);
    }
    return err;
};
